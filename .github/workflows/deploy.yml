name: 'deploy'
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'README.md'
      - 'infraScript/**'
    branches:
      - 'main'
jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/gdgoc-bugburger:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/gdgoc-bugburger:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.EC2_INSTANCE_ID }}  # EC2 인스턴스 ID를 시크릿으로 관리
          working-directory: /
          comment: Deploy
          command: |
            echo "=== Starting deployment ==="
            
            # 디렉토리 존재 여부 확인 및 생성 
            sudo mkdir -p /dockerProjects || echo "Failed to create /dockerProjects directory"
            sudo mkdir -p /dockerProjects/gdgoc-bugburger || echo "Failed to create /dockerProjects/gdgoc-bugburger directory"
            sudo mkdir -p /dockerProjects/gdgoc-bugburger/volumes/gen || echo "Failed to create volumes directory"
            
            # 권한 설정
            sudo chmod -R 755 /dockerProjects
            
            # 현재 디렉토리 구조 확인
            echo "=== Directory Structure ==="
            ls -la /dockerProjects/
            
            # zero_downtime_deploy.py 다운로드
            echo "=== Downloading deployment script ==="
            sudo curl -o /dockerProjects/gdgoc-bugburger/zero_downtime_deploy.py https://raw.githubusercontent.com/whqtker/bb-backend/main/infraScript/zero_downtime_deploy.py
            sudo chmod +x /dockerProjects/gdgoc-bugburger/zero_downtime_deploy.py
            
            # 필요한 패키지 설치 확인 
            echo "=== Checking required packages ==="
            which socat || sudo yum install -y socat
            which python3 || sudo yum install -y python3
            python3 -m pip install requests || sudo pip3 install requests
            
            # 배포 스크립트 실행
            echo "=== Running deployment script ==="
            sudo python3 /dockerProjects/gdgoc-bugburger/zero_downtime_deploy.py
            
            # 로그 파일 출력
            echo "=== Checking deployment status ==="
            if [ -f "/dockerProjects/gdgoc-bugburger/deploy.log" ]; then
              echo "=== Deployment Log ==="
              cat /dockerProjects/gdgoc-bugburger/deploy.log
            else
              echo "WARNING: Deployment log file not created!"
            fi
            
            # 컨테이너 상태 확인
            echo "=== Docker containers status ==="
            docker ps -a | grep gdgoc-bugburger || echo "No gdgoc-bugburger containers running"